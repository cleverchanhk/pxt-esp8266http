{"entries":[{"timestamp":1745857193999,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"//% color=#008080 icon=\"\\uf1eb\" weight=90\nnamespace ESP8266HTTP {\n    let buffer = \"\";\n    let response = \"\";\n    let onResponseHandler: (data: string) => void = null;\n\n    // Initialize UART and ESP8266\n    export function initESP8266(tx: SerialPin, rx: SerialPin, baudRate: BaudRate): void {\n        serial.redirect(tx, rx, baudRate);\n        serial.onDataReceived(serial.delimiters(Delimiters.NewLine), () => {\n            const data = serial.readUntil(serial.delimiters(Delimiters.NewLine));\n            buffer += data;\n\n            // Process all complete +IPD messages in buffer\n            while (buffer.includes(\"+IPD\")) {\n                const ipdStart = buffer.indexOf(\"+IPD\");\n                const lengthEnd = buffer.indexOf(\":\", ipdStart);\n                const dataEnd = buffer.indexOf(\"\\n\", ipdStart);\n\n                if (lengthEnd > -1 && dataEnd > -1) {\n                    const length = parseInt(buffer.substr(ipdStart + 5, lengthEnd - (ipdStart + 5)));\n                    const ipdData = buffer.substr(lengthEnd + 1, dataEnd - (lengthEnd + 1));\n                    response += ipdData;\n                    buffer = buffer.substr(dataEnd + 1);\n                } else {\n                    break;\n                }\n            }\n\n            // Check for CLOSED (end of response)\n            if (buffer.includes(\"CLOSED\") && onResponseHandler) {\n                onResponseHandler(response);\n                response = \"\";\n                buffer = \"\";\n            }\n        });\n    }\n\n    // Send AT Command with basic error checking\n    function sendATCommand(cmd: string, timeout: number = 2000): boolean {\n        serial.writeString(cmd + \"\\r\\n\");\n        let response = \"\";\n        const start = input.runningTime();\n\n        while (input.runningTime() - start < timeout) {\n            const incoming = serial.readString();\n            if (incoming.length > 0) {\n                response += incoming;\n                if (response.includes(\"\\n\")) {\n                    const lines = response.split(\"\\n\");\n                    for (let line of lines) {\n                        if (line.includes(\"OK\")) return true;\n                        if (line.includes(\"ERROR\")) return false;\n                    }\n                    response = \"\";\n                }\n            }\n            basic.pause(10);\n        }\n        return false;\n    }\n\n    // Connect to Wi-Fi\n    //% block=\"Connect to Wi-Fi SSID %ssid Password %pwd\"\n    export function connectWifi(ssid: string, pwd: string): boolean {\n        if (!sendATCommand(\"AT\")) return false;\n        if (!sendATCommand(\"AT+CWMODE=1\")) return false;\n        return sendATCommand(`AT+CWJAP=\"${ssid}\",\"${pwd}\"`, 10000);\n    }\n\n    // Send HTTP GET Request\n    //% block=\"HTTP GET URL %url || Handler %handler\"\n    export function httpGet(url: string, handler?: (data: string) => void): boolean {\n        // Clear previous response\n        response = \"\";\n        buffer = \"\";\n\n        if (handler) onResponseHandler = handler;\n\n        // Parse URL\n        let domain = \"\";\n        let path = \"/\";\n        if (url.includes(\"http://\")) {\n            const afterProtocol = url.substr(7);\n            const firstSlash = afterProtocol.indexOf(\"/\");\n            domain = firstSlash == -1 ? afterProtocol : afterProtocol.substr(0, firstSlash);\n            path = firstSlash == -1 ? \"/\" : afterProtocol.substr(firstSlash);\n        }\n\n        if (domain == \"\") return false;\n\n        // Establish connection\n        if (!sendATCommand(`AT+CIPSTART=\"TCP\",\"${domain}\",80`)) return false;\n\n        // Send request\n        const request = `GET ${path} HTTP/1.1\\r\\nHost: ${domain}\\r\\nConnection: close\\r\\n\\r\\n`;\n        if (!sendATCommand(`AT+CIPSEND=${request.length}`)) return false;\n\n        serial.writeString(request);\n        return true;\n    }\n}"],[1,"\n"]],"start1":0,"start2":0,"length1":3801,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":239,"start2":239,"length1":32,"length2":31}]}]},{"timestamp":1745857694357,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":114}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":234,"start2":234,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1745857193998,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"pxt-esp8266http\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1745857829488}